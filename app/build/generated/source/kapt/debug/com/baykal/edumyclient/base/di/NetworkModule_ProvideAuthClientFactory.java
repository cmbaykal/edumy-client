// Generated by Dagger (https://dagger.dev).
package com.baykal.edumyclient.base.di;

import com.baykal.edumyclient.base.network.AuthInterceptor;
import com.baykal.edumyclient.base.network.EdumyAuthenticator;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.ktor.client.HttpClient;
import javax.inject.Provider;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideAuthClientFactory implements Factory<HttpClient> {
  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  private final Provider<AuthInterceptor> authInterceptorProvider;

  private final Provider<EdumyAuthenticator> authenticatorProvider;

  public NetworkModule_ProvideAuthClientFactory(
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<AuthInterceptor> authInterceptorProvider,
      Provider<EdumyAuthenticator> authenticatorProvider) {
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.authInterceptorProvider = authInterceptorProvider;
    this.authenticatorProvider = authenticatorProvider;
  }

  @Override
  public HttpClient get() {
    return provideAuthClient(loggingInterceptorProvider.get(), authInterceptorProvider.get(), authenticatorProvider.get());
  }

  public static NetworkModule_ProvideAuthClientFactory create(
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<AuthInterceptor> authInterceptorProvider,
      Provider<EdumyAuthenticator> authenticatorProvider) {
    return new NetworkModule_ProvideAuthClientFactory(loggingInterceptorProvider, authInterceptorProvider, authenticatorProvider);
  }

  public static HttpClient provideAuthClient(HttpLoggingInterceptor loggingInterceptor,
      AuthInterceptor authInterceptor, EdumyAuthenticator authenticator) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideAuthClient(loggingInterceptor, authInterceptor, authenticator));
  }
}
